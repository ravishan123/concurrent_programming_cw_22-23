range PAPER_TRAY = 0..3
const EMPTY_PAPER_TRAY = 0
const FULL_PAPER_TRAY = 3

set Students = { student1, student2 }
set Users = { Students, technician }

// Actions that should not be performed by Students and Technicians separately
set StudentProhibitedActions = { acquireToRefill, fill, cannotFill }
set TechnicianProhibitedActions = { acquireToPrint }

PRINTER = PRINTER_IN_OPERATION[FULL_PAPER_TRAY],
PRINTER_IN_OPERATION[papersInTray: PAPER_TRAY] = 
									if (papersInTray > EMPTY_PAPER_TRAY)// there's paper in the tray
									then (acquireToPrint -> release -> PRINTER_IN_OPERATION[papersInTray - 1]
											| acquireToRefill -> cannotFill -> release -> PRINTER_IN_OPERATION[papersInTray])
									else // printer has run out of paper 
										(acquireToRefill -> fill -> release -> PRINTER_IN_OPERATION[FULL_PAPER_TRAY]).

STUDENT(DOCUMENTS = 1) = USE_PRINTER[1],
USE_PRINTER[documentNo: 1..DOCUMENTS] = (acquireToPrint -> printDocument[documentNo] -> release ->
								if(documentNo + 1 <= DOCUMENTS) // if student has not finished printing their documents
								then USE_PRINTER[documentNo + 1] // proceed to use the printer (in their next turn) to print their next document
								else (terminate -> END)) + StudentProhibitedActions.

TECHNICIAN = (acquireToRefill -> { fill, cannotFill } -> release -> TECHNICIAN | terminate -> END) + TechnicianProhibitedActions.
||PRINTING_SYSTEM = ( student1: STUDENT(3) || student2: STUDENT(2) || technician: TECHNICIAN || Users :: PRINTER )
						/ { terminate / Users.terminate }.
